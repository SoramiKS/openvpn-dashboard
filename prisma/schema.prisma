// This is your updated schema.prisma content

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  ADMIN
  USER
}

enum NodeStatus {
  ONLINE
  OFFLINE
  UNKNOWN
  ERROR
  DELETING
}

enum VpnCertificateStatus {
  VALID
  REVOKED
  EXPIRED
  PENDING // Tambahkan PENDING untuk saat user dibuat tapi cert belum dihasilkan/disinkronkan
  UNKNOWN
}

enum ActionType {
  CREATE_USER
  REVOKE_USER
  RESTART_NODE
  GET_LATEST_OVPN
  DECOMMISSION_AGENT
}

enum ActionStatus {
  PENDING
  IN_PROGRESS // Opsional, untuk menandai bahwa agen sedang mengerjakan ini
  COMPLETED
  FAILED
}

// --- Models ---

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String    // Simpan password yang sudah di-hash (misal: dengan bcrypt)
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relasi: Satu User dashboard memiliki satu profil VpnUser
  vpnProfile VpnUser?

  ActionLog ActionLog[]
}

model Node {
  id           String    @id @default(uuid())
  name         String    @unique
  ip           String
  token        String    @unique // Unique token for agent authentication
  lastSeen     DateTime?
  location     String?   // Lokasi fisik atau deskripsi dari node
  status       NodeStatus @default(UNKNOWN)
  cpuUsage     Float     @default(0.0) // Persentase CPU
  ramUsage     Float     @default(0.0) // Persentase RAM
  serviceStatus String    @default("UNKNOWN") // Tambahkan untuk status layanan OpenVPN (running/stopped)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletionStartedAt DateTime?  

  snmpCommunity String?
  vpnUsers     VpnUser[]     // Node has many VpnUsers
  actionLogs   ActionLog[]   // Node has many ActionLogs
  vpnActivityLogs VpnActivityLog[] // Add this line
  
}

model VpnUser {
  id              String    @id @default(uuid())
  username        String    @unique
  nodeId          String
  node            Node      @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  
  status          VpnCertificateStatus @default(PENDING)
  expirationDate  DateTime?
  revocationDate  DateTime?
  serialNumber    String?
  isActive        Boolean   @default(false)
  lastConnected   DateTime?
  ovpnFileContent String?   @db.Text
  lastSeen        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  actionLogs      ActionLog[]

  // --- TAMBAHKAN DUA BARIS INI ---
  dashboardUserId String? @unique // Menghubungkan ke ID dari model User
  dashboardUser   User?   @relation(fields: [dashboardUserId], references: [id], onDelete: SetNull)
}

// Mengganti nama model 'Log' menjadi 'ActionLog' agar lebih spesifik
// Ini adalah model yang akan digunakan agen untuk mengambil perintah dari dasbor
model ActionLog {
  id              String       @id @default(uuid())
  action          ActionType
  status          ActionStatus @default(PENDING)
  message         String?

  nodeId          String
  node            Node         @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  vpnUserId       String?
  vpnUser         VpnUser?     @relation(fields: [vpnUserId], references: [id], onDelete: SetNull)

  details         String?
  ovpnFileContent String?

  
  initiatorId     String?      // Menyimpan ID dari admin yang melakukan aksi
  initiator       User?        @relation(fields: [initiatorId], references: [id], onDelete: SetNull)

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  executedAt      DateTime?
}

model VpnActivityLog {
  id            String    @id @default(cuid())
  timestamp     DateTime
  action        String    // "CONNECT" or "DISCONNECT"
  username      String?
  publicIp      String?
  vpnIp         String?
  bytesReceived BigInt?   // Use BigInt for potentially large numbers
  bytesSent     BigInt?   // Use BigInt for potentially large numbers
  createdAt     DateTime  @default(now())

  // Relation to the Node (server)
  node          Node      @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId        String
}